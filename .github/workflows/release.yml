name: Release

on:
  push:
    branches: [ master ]

jobs:
  tests:
    runs-on: ubuntu-latest
    name: Tests
    services:
      mongo:
        image: mongo:5
        env:
          MONGO_INITDB_ROOT_USERNAME: chat
          MONGO_INITDB_ROOT_PASSWORD: chat
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
    env:
      DATABASE_URL: 'mongodb://chat:chat@localhost:27017/chat?authSource=admin'
    outputs:
      tagged: ${{steps.tagged.outputs.tagged}}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Use Node.js 17.x
      uses: actions/setup-node@v3
      with:
        node-version: 17.x
        cache: 'npm'
    - name: apply secrets
      run: echo $CONFIG_FILE >> chat.config.js
      shell: bash
      env:
        CONFIG_FILE: ${{secrets.TEST_CONFIG}}
        DATABASE_URL: 'mongodb://chat:chat@localhost:27017/chat?authSource=admin'
    - run: npm ci
    - run: npm run lint:ci
    - run: npx migrate-mongo up
    - run: npm run test:ci

    - name: Fetch tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - name: Read package.json
      id: package
      uses: gregoranders/nodejs-project-info@v0.0.1

    - name: 'Check: package version has corrosponding git tag'
      id: tagged
      shell: bash
      run: git show-ref --tags --verify --quiet -- "refs/tags/v${{ steps.package.outputs.version }}" && echo "::set-output name=tagged::0" || echo "::set-output name=tagged::1"

  deploy:
    needs: tests
    name: Deploy to server
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Tag Release
      run: |
        version_name="v$(cat package.json | awk '/version/{print $2}' | sed 's/[",]//g')"
        echo "Tagging release with tag $version_name"
        git push origin :refs/tags/$version_name
        git tag -f $version_name
        git push origin --tags

    - uses: kielabokkie/ssh-key-and-known-hosts-action@v1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        ssh-host: ${{ secrets.SSH_HOST }}

    - name: Push changes to remote
      run: |
        git remote add prod ssh://raay@codecat.io:/var/docker/chat/app
        git push --verbose prod master:master -f

  build:
    name: Build mobile app
    needs: tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout master branch
      uses: actions/checkout@v3

    - name: set up JDK 1.8
      if: steps.tagged.outputs.tagged == 1
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Use Node.js 17.x
      uses: actions/setup-node@v3
      if: steps.tagged.outputs.tagged == 1
      with:
        node-version: 17.x
        cache: 'npm'

    - name: apply secrets
      if: needs.tests.outputs.tagged == 1
      run: echo $CONFIG_FILE >> chat.config.js
      shell: bash
      env:
        CONFIG_FILE: ${{secrets.PRODUCTION_CONFIG}}

    - run: npm i --production=false
      if: needs.tests.outputs.tagged == 1

    - run: npm run build
      if: needs.tests.outputs.tagged == 1
      env: 
        NODE_ENV: production

    - run: npx cap sync
      if: needs.tests.outputs.tagged == 1
      working-directory: ./packages/app

    - name: Build with Gradle
      if: needs.tests.outputs.tagged == 1
      working-directory: ./packages/app/android
      run: ./gradlew build --warning-mode=all --stacktrace

    - name: Assemble Release Bundle
      if: needs.tests.outputs.tagged == 1
      working-directory: ./packages/app/android
      run: ./gradlew bundleRelease

    - uses: r0adkll/sign-android-release@v1
      if: needs.tests.outputs.tagged == 1
      name: Sign app APK
      id: sign_app
      with:
        releaseDirectory: ./packages/app/android/app/build/outputs/bundle/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
      env:
        BUILD_TOOLS_VERSION: "30.0.2"
          
    - name: Create service_account.json
      if: needs.tests.outputs.tagged == 1
      run: echo '${{ secrets.GOOGLE_DEPLOY_KEY }}' > service_account.json

    - name: Deploy to Internal
      if: needs.tests.outputs.tagged == 1
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJson: service_account.json
        packageName: io.codecat.chat
        releaseFiles: ${{steps.sign_app.outputs.signedReleaseFile}}
        track: internal
        status: draft

    # - name: Archive production artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: android-bundle
    #     path: ${{steps.sign_app.outputs.signedReleaseFile}}

