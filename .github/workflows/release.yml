name: Create and publish a Docker image

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:5
        env:
          MONGO_INITDB_ROOT_USERNAME: chat
          MONGO_INITDB_ROOT_PASSWORD: chat
        options: >-
          --health-cmd mongo
          --health-interval 20s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 27017:27017
    env:
      NODE_ENV: 'test'
      DATABASE_URL: 'mongodb://chat:chat@localhost:27017/tests?authSource=admin'
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
    - uses: denoland/setup-deno@v2
      with:
        deno-version: '2.x'
    - run: npm i
    - run: deno install --allow-scripts
    - run: deno task migrate:tests
    - run: deno task check

  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ./baseImage
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
